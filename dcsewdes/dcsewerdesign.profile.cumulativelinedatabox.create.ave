' DCSewerDesign.Profile.CumulativeLineDataBox.create

' arguments: Profile FTab, Line FTab, active View, X-Coordinate, 
'            Y-Coordinate, Data Fieldname, Label String, Line Record List,
'            Int Precision

' returns the new Y-Coordinate

' (c) 2000 - 2004 DORSCH Consult

' Parameter
if(self.count <> 9)then
  System.echo("DCSewerDesign.Profile.CumulativeLineDataBox.create: ERROR: Expected 9 arguments")
  exit
end
ftbProfile = self.get(0)
ftbLine = self.get(1)
viewActive = self.get(2)
numX = self.get(3)
numY = self.get(4)
fldData = self.get(5)
strLabel = self.get(6)
lstLineRecords = self.get(7)
numPrecision = self.get(8)

numI = 0
for each objArgument in self
  if(objArgument.asString="nil")then
    System.echo("DCSewerDesign.ProfileCumulativeLineDataBox.create: Argument"++numI.asString++"=nil")
  end
  numI = numI+1
end

strFormat = "dd"
if(numPrecision > 0)then
  strFormat = "d."
  for each i in 1..numPrecision
     strFormat = strFormat+"d"
  end
end

fldProfileShape = ftbProfile.findField("Shape")
fldLineShape = ftbLine.findField("Shape")
fldProfileStyle = ftbProfile.findField("style")

' label the box

gtxLabel = GraphicText.make(strLabel,Point.make(0,0))
viewActive.getGraphics.add(gtxLabel)
numHeight = gtxLabel.getExtent.getY+1
tpsLabel = TextPositioner.make(Point)
tpsLabel.SetHAlign(#TEXTPOSITIONER_HALIGN_RIGHT)
tpsLabel.SetVAlign(#TEXTPOSITIONER_VALIGN_ON)
pntLabelLocation = Point.make(numX-58, numY-(numHeight/2)+1)
tpsLabel.calculate(pntLabelLocation, gtxLabel.GetExtent, 1, nil)
gtxLabel.SetOrigin(tpsLabel.GetOrigin)
for each symText in gtxLabel.returnSymbols
  viewActive.getDisplay.hookupSymbol(symText)
end

recProfile = ftbProfile.addRecord
pntVerticalLineStart = Point.make(numX, numY)
pntVerticalLineEnd = Point.make(numX, numY-numHeight)
pllVerticalLine = Polyline.make({{pntVerticalLineStart, pntVerticalLineEnd}})
ftbProfile.setValue(fldProfileShape, recProfile, pllVerticalLine)
ftbProfile.setValue(fldProfileStyle, recProfile, "normal")

strPreviousText = " "
numCumulativeLength = 0

' draw data texts
numWidth = 0
for each i in 0..(lstLineRecords.count-1)
  recLine = lstLineRecords.get(i)
  numLength = ftbLine.returnValue(fldLineShape, recLine).returnLength
  if(fldData.isTypeShape)then
    strText = ftbLine.returnValue(fldData, recLine).returnLength.setFormat(strFormat).asString
  else
    strText = ftbLine.returnValue(fldData, recLine)
    if(strText.is(Number))then
      strText = strText.setFormat(strFormat).asString
    end
  end
  if((strText = nil)or(strText=""))then
    strText = " "
  end
  if((strText <> strPreviousText) and(i<>0))then
    pntTextLocation = Point.make(numX+numWidth-(numCumulativeLength/2),numY-(numHeight/2)+1)
    gtxText = GraphicText.make(strPreviousText, pntTextLocation)
    viewActive.getGraphics.add(gtxText)
    tpsText = TextPositioner.make(Point)
    tpsText.SetHAlign(#TEXTPOSITIONER_HALIGN_CENTER)
    tpsText.SetVAlign(#TEXTPOSITIONER_VALIGN_ON)
    tpsText.calculate(pntTextLocation, gtxText.getExtent, 1, nil)
    gtxText.setOrigin(tpsText.getOrigin)
    for each symText in gtxText.returnSymbols
      viewActive.getDisplay.hookupSymbol(symText)
    end
    recProfile = ftbProfile.addRecord
    pllVerticalLine.move(numCumulativeLength, 0)
    ftbProfile.setValue(fldProfileShape, recProfile, pllVerticalLine)
    ftbProfile.setValue(fldProfileStyle, recProfile, "normal")
    numCumulativeLength = 0
  end
  numWidth = numWidth + numLength
  numCumulativeLength = numCumulativeLength + numLength
  strPreviousText = strText
end

if(strPreviousText <> " ")then
  pntTextLocation = Point.make(numX+numWidth-(numCumulativeLength/2),numY-(numHeight/2)+1)
    gtxText = GraphicText.make(strPreviousText, pntTextLocation)
    viewActive.getGraphics.add(gtxText)
    tpsText = TextPositioner.make(Point)
    tpsText.SetHAlign(#TEXTPOSITIONER_HALIGN_CENTER)
    tpsText.SetVAlign(#TEXTPOSITIONER_VALIGN_ON)
    tpsText.calculate(pntTextLocation, gtxText.getExtent, 1, nil)
    gtxText.setOrigin(tpsText.getOrigin)
    for each symText in gtxText.returnSymbols
      viewActive.getDisplay.hookupSymbol(symText)
    end
end

'draw the box
pntBoxOrigin = Point.make(numX-60, numY-numHeight)
pntBoxSize = Point.make(numWidth+60+20, numHeight)
pllFrame = Rect.make(pntBoxOrigin, pntBoxSize).asPolygon.asPolyline
recProfile = ftbProfile.addRecord
ftbProfile.setValue(fldProfileShape, recProfile, pllFrame)
ftbProfile.setValue(fldProfileStyle, recProfile, "normal")

return numY-numHeight
