' DCWatDes.Model.Epanet.check

' (c) 2001 DORSCH Consult

' expects no arguments (called from menu)
' returns nothing (reports with message boxes)

' checks for unique dc_ids throughout the model
' checks if node1, node2 fields in the pipes table are of type string
' if pumps or valves are used in the model

' This library is free software; you can redistribute it and/or
' modify it under the terms of the GNU Lesser General Public
' License as published by the Free Software Foundation; either
' version 2.1 of the License, or (at your option) any later version.

' This library is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
' Lesser General Public License for more details.

' You should have received a copy of the GNU Lesser General Public
' License along with this library; if not, write to the Free Software
' Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

av.run("DCWatDes.Model.Epanet.ensureAliases",nil)

lstFTabs = av.run("DCWatDes.Model.Epanet.returnFTabDictionary", nil)

numToGo = lstFTabs.count
numCompleted = 0
numDoubleIDs = 0
'numIDsTooLong = 0

blnErrorOccurred = false

lstThemes = av.run("DCWatDes.Model.Epanet.returnThemeDictionary", nil)

' check for NULL shapes

for each ftbFeature in lstFTabs
  strQuery = "[Shape].isNull"
  bmpSelection = ftbFeature.getSelection
  if(bmpSelection = nil)then
    MsgBox.error("Empty Selection","DC Water Design")
    exit
  end
  ftbFeature.query(strQuery, bmpSelection, #VTAB_SELTYPE_NEW)
  if(bmpSelection.count > 0)then
    blnDelete = MsgBox.yesNo("Found"++bmpSelection.count.asString++"records with NULL shapes. Should these records be deleted?","DC Water Design", true)
    if(blnDelete)then
      ftbFeature.setEditable(true)
      ftbFeature.removeRecords(bmpSelection)
      ftbFeature.setEditable(false)
    end
  end
end

for each thmFeature in lstThemes
  thmFeature.clearSelection  
end 

' merge into one table
flnTemp = Filename.getTmpDir.makeTmp("dc_id_summary","dbf")
vtbTemp = VTab.makeNew(flnTemp, dBase)
fldTemp = Field.make("dc_id", #FIELD_CHAR, 16, 0)
if(vtbTemp.isEditable.not)then
  vtbTemp.setEditable(true)
end
vtbTemp.addFields({fldTemp})

for each ftbFeature in lstFTabs
  fldID = ftbFeature.findField("dc_id")
  if(fldID = nil)then
    MsgBox.error("Field 'dc_id' is missing","DC Water Design")
    vtbTemp.setEditable(false)
    exit
  end
  for each recFeature in ftbFeature
    strID = ftbFeature.returnValue(fldID, recFeature).asString
    recNew = vtbTemp.addRecord
    vtbTemp.setValue(fldTemp, recNew, strID)
  end
end

'summarize
flnTemp2 = Filename.getTmpDir.makeTmp("dc_id_summary","dbf")
vtbSummary = vtbTemp.summarize(flnTemp2, dBase, fldTemp, {},{})

' check for duplicate IDs

strProblematicQuery = "([dc_id].asString.count=(-1))"


strQuery = "[count] > 1"
bmpSelection = vtbSummary.getSelection
vtbSummary.query(strQuery, bmpSelection, #VTAB_SELTYPE_NEW)
numDoubleIDs = bmpSelection.count
fldSummaryID = vtbSummary.findField("dc_id")

for each recProblematic in bmpSelection
  strID = vtbSummary.returnValue(fldSummaryID, recProblematic)
  strProblematicQuery = strProblematicQuery+"or([dc_id].asString.trim="+strID.quote+")"
end


' check for IDs that are too long
strQuery = "[dc_id].count > 13"
bmpSelection = vtbSummary.getSelection
vtbSummary.query(strQuery, bmpSelection, #VTAB_SELTYPE_NEW)
numIDsTooLong = bmpSelection.count
fldSummaryID = vtbSummary.findField("dc_id")

for each recProblematic in bmpSelection
  strID = vtbSummary.returnValue(fldSummaryID, recProblematic)
  strProblematicQuery = strProblematicQuery+"or([dc_id].asString.trim="+strID.quote+")"
end

' select problematic records

for each ftbFeature in lstFTabs
  bmpSelection = ftbFeature.getSelection
  ftbFeature.query(strProblematicQuery, bmpSelection, #VTAB_SELTYPE_NEW)
  ftbFeature.setSelection(bmpSelection.clone)
  ftbFeature.updateSelection
end

vtbSummary.setEditable(false)
vtbSummary.deactivate
vtbTemp.setEditable(false)
vtbTemp.deactivate
File.delete(flnTemp)
File.delete(flnTemp2)

if(numDoubleIDs>0)then
  blnErrorOccurred = true
  MsgBox.warning("The model has"++numDoubleIDs.asString++" duplicate ID(s)."+NL+"Check the Selection.", "DC Water Design")
else
  MsgBox.info("The model ID's are unique", "DC Water Design")
end

if(numIDsTooLong > 0)then
  blnErrorOccurred = true
  MsgBox.warning("Some ID's in the model are too long. They should not exceed 13 characters."+NL+"Check the Selection.","DC Water Design")
end

if(blnErrorOccurred.not)then
  for each ftbTheme in lstFTabs
    ftbTheme.getSelection.clearAll
    ftbTheme.updateSelection
  end
end

av.getActiveDoc.getDisplay.invalidate(true)

ftbValves = lstFTabs.get("Valves")
ftbPumps = lstFTabs.get("Pumps")
ftbPipes = lstFTabs.get("Pipes")
if(ftbPipes = nil)then
  MsgBox.warning("No Pipes Theme selected.", "DC Water Design")
end
if((ftbValves <> nil)or(ftbPumps <> nil))then
  for each i in 1..2
    strFieldName = "node"+i.asString
    fldNode = ftbPipes.findField(strFieldName)
    if(fldNode = nil)then
      MsgBox.warning("The Pipes theme is missing the field '"+strFieldName+"'.", "DC Water Design")
    else
      if(fldNode.isTypeString.not)then
        MsgBox.warning("The type of field '"+strFieldName+"' in the Pipes theme should be string.","DC Water Design")
      end
    end
  end
end