' DCWatDes.Model.Epanet.loadResultsForStep

' (c) 2000, 2001  DORSCH Consult
' load the results for the given timestep into the appropriate tables

' This library is free software; you can redistribute it and/or
' modify it under the terms of the GNU Lesser General Public
' License as published by the Free Software Foundation; either
' version 2.1 of the License, or (at your option) any later version.

' This library is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
' Lesser General Public License for more details.

' You should have received a copy of the GNU Lesser General Public
' License along with this library; if not, write to the Free Software
' Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

' no arguments
' nothing is returned

av.run("DCWatDes.Model.Epanet.ensureAliases", nil)

extDCWatDes = Extension.find("DC Water Design")
if(extDCWatDes <> nil)then
  dicPreferences = extDCWatDes.getPreferences
else 
  return nil
end

lstSteps = dicPreferences.get("lstSteps")
if(lstSteps = nil)then
  return nil
end

strStep = MsgBox.choice(lstSteps, "Choose the Timestep to load", "DC Water Design")
if(strStep = nil)then
  return nil
end

strResultLoader = dicPreferences.get("strResultLoader")
if((strResultLoader="ArcView")or(strResultLoader = nil))then
  vtbNodeResults = nil
  vtbLinkResults = nil
  lstTables = av.getProject.getDocsWithGUI(av.findGUI("Table"))
  strNodeResults = dicPreferences.get("strNodeResults")
  strLinkResults = dicPreferences.get("strLinkResults") 
  for each tableFeature in lstTables
    vtbFeature = tableFeature.getVTab
    if((vtbFeature <> nil)and(vtbFeature.getBaseTableFilename <> nil))then
      if(vtbFeature.getBaseTableFilename.getFullName = strLinkResults)then
        vtbLinkResults = vtbFeature
      else
        if(vtbFeature.getBaseTableFilename.getFullName = strNodeResults)then          
          vtbNodeResults = vtbFeature
        end
      end
    end
  end

  bmpNodeResults = Bitmap.make(vtbNodeResults.getNumRecords)
  bmpLinkResults = Bitmap.make(vtbLinkResults.getNumRecords)
  vtbNodeResults.setDefinition("([timestep]="+strStep+")")
  vtbLinkResults.setDefinition("([timestep]="+strStep+")")
  bmpNodeSelection = vtbNodeResults.getSelection
  bmpNodeSelection.clearAll
  vtbNodeResults.setSelection(bmpNodeSelection)
  bmpLinkSelection = vtbLinkResults.getSelection
  bmpLinkSelection.clearAll
  vtbLinkResults.setSelection(bmpLinkSelection)
    
    
  dicFTabs = av.run("DCWatDes.Model.Epanet.returnFTabDictionary",nil)
      
  fldResultID = vtbNodeResults.findField("dc_id")
  fldResultPressure = av.run("DCWatDes.ExpandedAliasVTab.findField", {vtbNodeResults, "result_pressure"})
  fldResultPressure.setAlias("result_pressure_join")
  fldResultHead = av.run("DCWatDes.ExpandedAliasVTab.findField", {vtbNodeResults, "result_head"})
  fldResultHead.setAlias("result_head_join")
  fldResultDemand = av.run("DCWatDes.ExpandedAliasVTab.findField", {vtbNodeResults, "result_demand"})
  fldResultDemand.setAlias("result_demand_join")
  bmpResult = bmpNodeResults
  
  ' write results to feature themes 
  for each strFeature in {"Junctions", "Tanks", "Reservoirs"}
    ftbFeature = dicFTabs.get(strFeature)
    if(ftbFeature <> nil)then
      ftbFeature.unjoinAll
      fldFeatureID = ftbFeature.findField("dc_id")
      ftbFeature.join(fldFeatureID, vtbNodeResults, fldResultID)
      ftbFeature.setEditable(true)
      bmpSelection = ftbFeature.getSelection
      bmpSelection.clearAll
      ftbFeature.setSelection(bmpSelection)
      bmpNodeSelection = vtbNodeResults.getSelection
      bmpNodeSelection.clearAll
      vtbNodeResults.setSelection(bmpNodeSelection)
      bmpLinkSelection = vtbLinkResults.getSelection
      bmpLinkSelection.clearAll
      vtbLinkResults.setSelection(bmpLinkSelection)

      for each strField in {"result_pressure", "result_head", "result_demand"}
        fldResult = av.run("DCWatDes.ExpandedAliasVTab.findField",{ftbFeature, strField})
        ftbFeature.calculate("["+strField+"_join]",fldResult)
      end
      ftbFeature.setEditable(false)
      ftbFeature.unjoinAll
    end
  end
  
  fldResultID = vtbLinkResults.findField("dc_id")
  fldResultVelocity = av.run("DCWatDes.ExpandedAliasVTab.findField", {vtbLinkResults, "result_velocity"})
  fldResultFlow = av.run("DCWatDes.ExpandedAliasVTab.findField", {vtbLinkResults, "result_flow"})
  fldResultHeadloss = av.run("DCWatDes.ExpandedAliasVTab.findField", {vtbLinkResults, "result_headloss"})
  for each fldResult in {fldResultVelocity, fldResultFlow, fldResultHeadloss}
    fldResult.setAlias(fldResult.getName+"_join")
  end
  bmpResult = bmpLinkResults
  
  for each strFeature in {"Pumps", "Valves", "Pipes"}
    ftbFeature = dicFTabs.get(strFeature)
    if(ftbFeature <> nil)then
      ftbFeature.unjoinAll
      fldFeatureID = ftbFeature.findField("dc_id")
      ftbFeature.join(fldFeatureID, vtbLinkResults, fldResultID)
      ftbFeature.setEditable(true)
      bmpSelection = ftbFeature.getSelection
      bmpSelection.clearAll
      ftbFeature.setSelection(bmpSelection)
      bmpNodeSelection = vtbNodeResults.getSelection
      bmpNodeSelection.clearAll
      vtbNodeResults.setSelection(bmpNodeSelection)
      bmpLinkSelection = vtbLinkResults.getSelection
      bmpLinkSelection.clearAll
      vtbLinkResults.setSelection(bmpLinkSelection)

      for each strField in {"result_velocity", "result_flow", "result_headloss"}
        fldResult = av.run("DCWatDes.ExpandedAliasVTab.findField",{ftbFeature, strField})
        ftbFeature.calculate("["+strField+"_join]",fldResult)
      end
      ftbFeature.setEditable(false)
      ftbFeature.unjoinAll
    end
  end                        
  vtbNodeResults.setDefinition("")
  vtbLinkResults.setDefinition("")  
  return nil
else 
  if(strResultLoader = "MySql")then
    ' find the SQL Connection
    strSqlConnection = dicPreferences.get("strSqlConnection")
    if(strSqlConnection = nil)then
      MsgBox.warning("You've got to setup a SQL Connection in order to load results.", "DC Water Design")
      return nil
    end
    
    sqlConnection = SqlCon.find(strSqlConnection)
    
    if(sqlConnection.isLogin.not)then
      av.run("DCMMS.SqlConnection.login",sqlConnection)
    end
    
    dicFTabs = av.run("DCWatDes.Model.Epanet.returnFTabDictionary",nil)
    
    ' node results
    vtbNodeResults = VTab.makeSql(sqlConnection, "select * from dc_nodes where time='"+strStep+"';")
    
    fldResultID = vtbNodeResults.findField("dc_id")
    fldResultPressure = av.run("DCWatDes.ExpandedAliasVTab.findField", {vtbNodeResults, "result_pressure"})
    fldResultHead = av.run("DCWatDes.ExpandedAliasVTab.findField", {vtbNodeResults, "result_head"})
    fldResultDemand = av.run("DCWatDes.ExpandedAliasVTab.findField", {vtbNodeResults, "result_demand"})
    bmpResult = vtbNodeResults.getSelection
    
    for each strFeature in {"Junctions", "Tanks", "Reservoirs", "Pumps", "Valves"}
      ftbFeature = dicFTabs.get(strFeature)
      fldFeatureID = ftbFeature.findField("dc_id")
      fldFeaturePressure = av.run("DCWatDes.ExpandedAliasVTab.findField",{ftbFeature, "result_pressure"})
      fldFeatureHead = av.run("DCWatDes.ExpandedAliasVTab.findField", {ftbFeature, "result_head"})
      fldFeatureDemand = av.run("DCWatDes.ExpandedAliasVTab.findField", {ftbFeature, "result_demand"})
      for each recFeature in ftbFeature
        strID = ftbFeature.returnValue(fldFeatureID, recFeature).asString
        vtbNodeResults.query("[dc_id]='"+strID+"'", bmpResult, #VTAB_SELTYPE_NEW)
        recResult = bmpResult.getNextSet(-1)
        if(recResult<> -1)then
          objPressure = vtbNodeResults.returnValue(fldResultPressure, recResult)
          ftbFeature.setValue(fldFeaturePressure, recFeature, objPressure)
          objHead = vtbNodeResults.returnValue(fldResultHead, recResult)
          ftbFeature.setValue(fldFeatureHead, recFeature, objHead)
          objDemand = vtbNodeResults.returnValue(fldResultDemand, recResult)
          ftbFeature.setValue(fldFeatureDemand, recFeature, objDemand)
        end
      end
    end
    
    ' link results
    vtbLinkResults = VTab.makeSql(sqlConnection, "select * from dc_links where time='"+strStep+"';")
    fldResultID = vtbLinkResults.findField("dc_id")
    fldResultVelocity = av.run("DCWatDes.ExpandedAliasVTab.findField", {vtbLinkResults, "result_velocity"})
    fldResultFlow = av.run("DCWatDes.ExpandedAliasVTab.findField", {vtbLinkResults, "result_flow"})
    fldResultHeadloss = av.run("DCWatDes.ExpandedAliasVTab.findField", {vtbLinkResults, "result_headloss"})
    bmpResult = vtbLinkResults.getSelection
    
    for each strFeature in {"Pumps", "Valves", "Pipes"}
      ftbFeature = dicFTabs.get(strFeature)
      fldFeatureID = ftbFeature.findField("dc_id")
      fldFeatureVelocity = av.run("DCWatDes.ExpandedAliasVTab.findField",{ftbFeature, "result_velocity"})
      fldFeatureFlow = av.run("DCWatDes.ExpandedAliasVTab.findField", {ftbFeature, "result_flow"})
      fldFeatureHeadloss = av.run("DCWatDes.ExpandedAliasVTab.findField", {ftbFeature, "result_headloss"})
      for each recFeature in ftbFeature
        strID = ftbFeature.returnValue(fldFeatureID, recFeature).asString
        vtbLinkResults.query("[dc_id]='"+strID+"'", bmpResult, #VTAB_SELTYPE_NEW)
        recResult = bmpResult.getNextSet(-1)
        if(recResult<> -1)then
          objVelocity = vtbLinkResults.returnValue(fldResultVelocity, recResult)
          ftbFeature.setValue(fldFeatureVelocity, recFeature, objVelocity)
          objFlow = vtbLinkResults.returnValue(fldResultFlow, recResult)
          ftbFeature.setValue(fldFeatureFlow, recFeature, objFlow)
          objHeadloss = vtbLinkResults.returnValue(fldResultHeadloss, recResult)
          ftbFeature.setValue(fldFeatureHeadloss, recFeature, objHeadloss)
        end
      end
    end
  end  
end    
