' DCWatDes.Project.extractModel

' Extract a model based on the bytecode.

' (c) 2005 DORSCH Consult
' 

' This library is free software; you can redistribute it and/or
' modify it under the terms of the GNU Lesser General Public
' License as published by the Free Software Foundation; either
' version 2.1 of the License, or (at your option) any later version.

' This library is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
' Lesser General Public License for more details.

' You should have received a copy of the GNU Lesser General Public
' License along with this library; if not, write to the Free Software
' Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

extDCWatDes = Extension.find("DC Water Design")
if(extDCWatDes <> nil)then
  dicPreferences = extDCWatDes.getPreferences
else
  MsgBox.info("Warning: Extension not found.","DC Water Design Extension")
end
if(dicPreferences <> nil)then
  blnEpanetThemesSetup = dicPreferences.get("blnEpanetThemesSetup")
  if(blnEpanetThemesSetup = nil)then
    av.run("DCWatDes.Dialog.EpanetThemes.open",nil)
    exit
  end
end

lstThemeNames = {"Pipes", "Junctions", "Pumps", "Reservoirs", "Tanks", "Valves"}
lstViews = av.getProject.getDocsWithGUI(av.findGUI("View"))
lstThemes = List.make
for each viewView in lstViews
  lstThemes = lstThemes + viewView.getThemes
end
dicThemes = Dictionary.make(100)
for each strTheme in {"Pipes", "Junctions", "Pumps", "Reservoirs", "Tanks", "Valves"}
  if(extDCWatDes <> nil)then
    strThemeName = dicPreferences.get("str"+strTheme)
  end
  if(strThemeName <> nil)then
    for each thmSearch in lstThemes
      if((thmSearch.is(FTheme))and(thmSearch.getName.lcase = strThemeName.lcase))then
        dicThemes.add(strTheme, thmSearch)
      end
    end
  end
end

blnCreateViews = MsgBox.yesNo("Create a view for each model?", "DC Water Design", true)

' Summarize by Zone

thmPipes = dicThemes.get("Pipes")
ftbPipes = thmPipes.getFTab
' TODO: Make field selectable
fldByteCode = ftbPipes.findField("ByteCode")
numWidth = fldByteCode.getWidth

' Create the necessary directory structure

flnBaseDirectory = ftbPipes.getSrcName.getFileName.returnDir

thmJunction = dicThemes.get("Junctions")
ftbJunction = thmJunction.getFTab
fldHasDemand = ftbJunction.findField("HasDemand")

for each numI in 0..(numWidth-1)
  flnZoneDirectory = FileName.merge(flnBaseDirectory.getFullName, "model\"+(numI+1).asString)
  av.run("DCWatDes.System.makeDir", flnZoneDirectory.getFullName)
  if(blnCreateViews)then
    viewModel = View.make
    viewModel.setName("Model "+(numI+1).asString)
    av.getProject.addDoc(viewModel)
  end
  ' Loop over all themes
  for each thmTheme in dicThemes
    ftbTheme = thmTheme.getFTab
    strOldDefinition = ftbTheme.getDefinition.clone
    strDefinition = "[ByteCode].middle("+numI.asString+",1)=""1"""
    ftbTheme.setDefinition(strDefinition)
    ftbTheme.updateDefBitmap
    if(ftbTheme.getNumRecords > 0)then
      flnThemeName = FileName.merge(flnZoneDirectory.getFullName, ftbTheme.getSrcName.getFileName.getBaseName)
      ftbExtracted = ftbTheme.export(flnThemeName, ftbTheme.getShapeClass, false)
      ftbTheme.setDefinition(strOldDefinition)
      ftbTheme.updateDefBitmap
      if(blnCreateViews)then
        thmExtracted = FTheme.make(ftbExtracted)
        viewModel.addTheme(thmExtracted)
        thmExtracted.setVisible(true)
      end
    end
  end
  ' Write out demand nodes if possible
  if((fldHasDemand <> nil)and(ftbJunction.getSrcName.getFileName.getBaseName.contains("junction")))then
    strOldDefinition = ftbJunction.getDefinition.clone
    strDefinition = "([ByteCode].middle("+numI.asString+",1)=""1"") and ([HasDemand]=1)"
    ftbJunction.setDefinition(strDefinition)
    ftbJunction.updateDefBitmap
    if(ftbJunction.getNumRecords > 0)then
      flnThemeName = FileName.merge(flnZoneDirectory.getFullName, ftbJunction.getSrcName.getFileName.getBaseName)
      flnThemeName = flnThemeName.getFullName.substitute("junction", "junctiondemand").asFileName
      ftbExtracted = ftbJunction.export(flnThemeName, ftbJunction.getShapeClass, false)
    end
    ftbJunction.setDefinition(strOldDefinition)
    ftbJunction.updateDefBitmap
  end
end
for each thmTheme in dicThemes
  ftbTheme = thmTheme.getFTab
  ftbTheme.setDefinition("")
  ftbTheme.updateDefBitmap
end  