' DCWatDes.View.moveNode

' (c) 2000 - 2002 DORSCH Consult
' move a network node (including rubber banding)

' This library is free software; you can redistribute it and/or
' modify it under the terms of the GNU Lesser General Public
' License as published by the Free Software Foundation; either
' version 2.1 of the License, or (at your option) any later version.

' This library is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
' Lesser General Public License for more details.

' You should have received a copy of the GNU Lesser General Public
' License along with this library; if not, write to the Free Software
' Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

' no arguments
' returns nothing

extWatDes = Extension.find("DC Water Design")
dicPreferences = extWatDes.getPreferences

numSnappingRadius = dicPreferences.get("strSnappingRadius").asNumber
if( numSnappingRadius = nil)then
  numSnappingRadius = 0.1
end

theView = av.GetActiveDoc
lineUser = theView.getDisplay.returnUserLine

dicFTabs = av.run("DCWatDes.Model.Epanet.returnFTabDictionary", nil)

ftbRemoveNode = nil
recRemoveNode = nil
blnDropMovedNode = false

' List to contain lists of FTabs and Bitmaps for records that should be deleted 
lstDeletes = List.make

if (lineUser.IsNull) then
  return nil
else
  ftbPipes = dicFTabs.get("Pipes")
  thmPipes = nil
  lstNodeThemes = List.make
  for each strNode in dicFTabs.returnKeys
    if(strNode <> "Pipes")then
      ftbNodes = dicFTabs.get(strNode)
      for each thmInView in theView.getThemes
        if((thmInView.is(FTheme))and(ftbNodes = thmInView.getFTab))then
          lstNodeThemes.add(thmInView)
        end
      end
    end
  end
  
  pntStart = lineUser.returnStart
  pntEnd = lineUser.returnEnd
  
  ' check if node is moved on another node
  for each thmNode in lstNodeThemes
    lstNodes = thmNode.findByPoint(pntEnd)
    if(lstNodes.count>0)then
      pntEnd =  thmNode.getFtab.returnValue(thmNode.getFtab.findField("Shape"), lstNodes.get(0)).clone
      blnRemoveOtherNode = MsgBox.yesNoCancel("The Moved node snaps onto another node."+NL+
                         "Should the other node be removed?"+NL+"No will drop the moved node.",
                         "DC Water Design Extension",true)
      if(blnRemoveOtherNode = nil)then
        'user selected Cancel
        return nil
      elseif(blnRemoveOtherNode)then
        ftbRemoveNode = thmNode.getFTab
        recRemoveNode = lstNodes.get(0)
      else
        blnDropMovedNode = true
      end
      break
    end
  end
  
  
  ' find the Node to move
  
  pntNode = nil
  
  for each thmNode in lstNodeThemes
    lstNodes = thmNode.findByPoint(pntStart)
    if(lstNodes.count>0)then
      ftbNode = thmNode.getFTab
      pntNode = ftbNode.returnValue(ftbNode.findField("Shape"), lstNodes.get(0)).clone
      
      if(ftbRemoveNode <>  nil)then
        if((ftbNode = ftbRemoveNode)and(lstNodes.get(0) = recRemoveNode))then
          ' node snapped onto itself
          return nil
        end
        ' move node
        ftbNode.setEditable(true)
        ftbNode.setValue(ftbNode.findField("Shape"), lstNodes.get(0), pntEnd)
        if(ftbNode <> ftbRemoveNode)then
          ftbNode.setEditable(false)
          ftbRemoveNode.setEditable(true)
        end
        ftbRemoveNode.removeRecord(recRemoveNode)
        ftbRemoveNode.setEditable(false)
      else
        if(blnDropMovedNode)then
          ftbNode.setEditable(true)
          ftbNode.removeRecord(lstNodes.get(0))
          ftbNode.setEditable(false)
        else
          ftbNode.setEditable(true)
          ftbNode.setValue(ftbNode.findField("Shape"), lstNodes.get(0), pntEnd)
          ftbNode.setEditable(false)
        end
      end
      break
    end
  end   

  if(pntNode = nil)then
    return nil
  end
 ' rubber-band connected pipes
 rectInvalidExtent = Rect.makeEmpty
 
  fldPipeShape = ftbPipes.findField("Shape") 
  ftbPipes.selectByPoint(pntNode, numSnappingRadius, #VTAB_SELTYPE_NEW) 
  bmpPipes = ftbPipes.getSelection
  
  'second run is necessary because selectByPoint returns also Pipes that
  'cross the point rather than start at it
  lstConnectedPipes = List.make
  ftbPipes.setEditable(true)
  for each recPipe in bmpPipes
    pllPipe = ftbPipes.returnValue(fldPipeShape, recPipe).clone
    lstPipeNodes = pllPipe.connect.asList
    for each i in {0, lstPipeNodes.get(0).count-1}
      pntPipeNode = lstPipeNodes.get(0).get(i)
      if(pntPipeNode.distance(pntNode) < numSnappingRadius)then
        lstPipeNodes.get(0).set(i, pntEnd)
        pllReshapedPipe = Polyline.make(lstPipeNodes)
        ftbPipes.setValue(fldPipeShape, recPipe, pllReshapedPipe)
        rectInvalidExtent = rectInvalidExtent.returnUnion(pllPipe.returnExtent)
        rectInvalidExtent = rectInvalidExtent.returnUnion(pllReshapedPipe.returnExtent).returnExtent
      end
    end  
  end
  ftbPipes.setEditable(false)

  av.getProject.setModified(true)
  theView.getDisplay.invalidateRect(rectInvalidExtent)
  av.showMsg("moved Node "+pntStart.distance(pntEnd).asString+" units.")
end 